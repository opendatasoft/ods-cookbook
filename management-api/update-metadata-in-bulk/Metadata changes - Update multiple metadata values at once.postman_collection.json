{
	"info": {
		"_postman_id": "a158643f-1a71-4aea-9c54-f8a4a3413f05",
		"name": "Metadata changes - Update multiple metadata values at once",
		"description": "The goal is to update all the metadatas held in the columns of the data file.\n\nCollection written for a \"domaindatasets://\" export data file (the reason behind this is that catalog exports do not have admin metadata values, whereas \"domaindatasets://\"\" can). \nAll metadatas labels have to be distinct.\nYou can find a \"how to\" on how to create the data file required by the collection (Steps 1-6 of the steps below).\n\nThe only variables needed in your Postman environment are:\n- domainid\n- apikey\n\nOne variable comes from the collection variables :\n- publish_metadata : true/false depending if you want to apply directly the changes in the front office. It is true by default.\n\nAll the other needed variables come from the data file.\n\nThe steps to run this collection are:\nStep 1 - Create a \"domaindatasets://\" dataset.\nStep 2 - Export the rows you wish to update.\nStep 3 - Import this sheet in a google sheet, and specify the correct separator (\";\" or \",\")\nStep 4 - Within the google sheet, change as you want the values of your metadatas\nStep 5 - Delete the columns of the metadata you do not wish to update\nStep 6 - Export this sheet as a csv with comma separator\nStep 7 - Run the collection with this csv as a data file\nWARNING: beware of entering all values as Text. true is not TRUE (boolean type in google sheet). To enforce true in google sheet, enter 'true.\n\nThree tests are executed by the Runner :\n- Did you get only 200 responses?\n- Did you update as many metadatas as you entered values in your csv?\nIf you did encounter an error it should be documented in the logs (Postman Console). If this is not the case the collection should be updated to deal with the error.\n- Have the new metadata been published in the front office if you have chosen to do so ?\n\nPrecisions:\n- Themes can be changed if you provide labels (under a \"Themes\" column, as in the \"domaindatasets://\" dataset), or if you provide IDs (under a \"theme_id\" column).\n- Languages can be changed if you provide the abbreviation (eg \"fr\" or \"en).",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Fetch the UID of a dataset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"reponse = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"A dataset exists with the given dataset identifier\", function () {",
							"   pm.expect(reponse).have.property('nhits', 1);",
							"});",
							"",
							"if (reponse.datasets.length<1) {",
							"    postman.setNextRequest(null);",
							"}",
							"else {",
							"    pm.variables.set(\"datasetuid\",reponse.datasets[0].dataset_uid);",
							"    pm.variables.set(\"published\", (reponse.datasets[0].metas.publishing ? reponse.datasets[0].metas.publishing.published : false));",
							"    pm.variables.set(\"federated_boolean\", (reponse.datasets[0].metas.default.federated ? true : false));",
							"",
							"    if (pm.variables.get(\"ignore_list_metadata_request\")=='true') {",
							"        postman.setNextRequest(\"3. Update multiple metadata at once\");",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{domainid}}.opendatasoft.com/api/management/v2/datasets/?rows=2&start=0&where=datasetid=\"{{Dataset identifier}}\"&apikey={{apikey}}",
					"protocol": "https",
					"host": [
						"{{domainid}}",
						"opendatasoft",
						"com"
					],
					"path": [
						"api",
						"management",
						"v2",
						"datasets",
						""
					],
					"query": [
						{
							"key": "rows",
							"value": "2"
						},
						{
							"key": "start",
							"value": "0"
						},
						{
							"key": "where",
							"value": "datasetid=\"{{Dataset identifier}}\""
						},
						{
							"key": "apikey",
							"value": "{{apikey}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "2. List all metadata",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.variables.set(\"metadata_list\",responseBody);",
							"pm.variables.set(\"ignore_list_metadata_request\",'true');",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{domainid}}.opendatasoft.com/api/management/v2/datasets/{{datasetuid}}/metadata?apikey={{apikey}}",
					"protocol": "https",
					"host": [
						"{{domainid}}",
						"opendatasoft",
						"com"
					],
					"path": [
						"api",
						"management",
						"v2",
						"datasets",
						"{{datasetuid}}",
						"metadata"
					],
					"query": [
						{
							"key": "apikey",
							"value": "{{apikey}}"
						}
					]
				},
				"description": "Returns a list of metadata for the dataset with the given UID.\nhttps://betahelp.opendatasoft.com/management-api/#list-all-metadata"
			},
			"response": []
		},
		{
			"name": "2 bis. List Theme IDs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.variables.set(\"theme_ids_list\",responseBody);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{domainid}}.opendatasoft.com/api/management/v2/domain?apikey={{apikey}}",
					"protocol": "https",
					"host": [
						"{{domainid}}",
						"opendatasoft",
						"com"
					],
					"path": [
						"api",
						"management",
						"v2",
						"domain"
					],
					"query": [
						{
							"key": "apikey",
							"value": "{{apikey}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "3. Update multiple metadata at once",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var metadata_list_json = JSON.parse(pm.variables.get(\"metadata_list\"));",
							"var themes_id_list_json = JSON.parse(pm.variables.get(\"theme_ids_list\"));",
							"var metadata_put_body = [];",
							"var error_values = [];",
							"Object.keys(pm.iterationData.toObject()).forEach(function(d) {",
							"    var set_value = true;",
							"    if (d == 'theme_id') {",
							"        //used to be useful to change override_remote_value, not anymore",
							"        //var new_meta = { 'metadata_name': d, 'value': pm.variables.get(d), 'template_name': 'internal', \"override_remote_value\": pm.variables.get(\"federated_boolean\") };",
							"        var new_meta = { 'metadata_name': d, 'value': pm.variables.get(d), 'template_name': 'internal', \"override_remote_value\": pm.variables.get(\"federated_boolean\") };",
							"        new_meta.value = new_meta.value.split(\";\");",
							"        metadata_put_body.push(new_meta);",
							"        return;",
							"    }",
							"    if (d == 'Dataset identifier') {",
							"        return;",
							"    }",
							"    //check if metadata is modifiable",
							"    var meta_info = metadata_list_json.find(obj => { return obj.definition.label === d });",
							"    if (!meta_info) {",
							"        error_values.push(\"The column \" + d + \" wasn't updated because it doesn't correspond to a modifiable metadata through API\");",
							"        set_value = false ;",
							"        return;",
							"    }",
							"    if (meta_info.definition.type == 'text') {",
							"        //used to be useful to change override_remote_value, not anymore",
							"       //var new_meta = { 'metadata_name': meta_info.name, 'value': String(pm.variables.get(d)), 'template_name': meta_info.template.name, \"override_remote_value\": pm.variables.get(\"federated_boolean\") };",
							"       var new_meta = { 'metadata_name': meta_info.name, 'value': String(pm.variables.get(d)), 'template_name': meta_info.template.name, \"override_remote_value\": true };",
							"    }",
							"    else {",
							"        //used to be useful to change override_remote_value, not anymore",
							"        //var new_meta = { 'metadata_name': meta_info.name, 'value': pm.variables.get(d), 'template_name': meta_info.template.name, \"override_remote_value\": pm.variables.get(\"federated_boolean\") };",
							"        var new_meta = { 'metadata_name': meta_info.name, 'value': pm.variables.get(d), 'template_name': meta_info.template.name, \"override_remote_value\": true };",
							"    }",
							"    //for text or datalist no need to reprocessing of value",
							"    if (new_meta.value === null || new_meta.value === \"\") {",
							"        if (new_meta.metadata_name == 'theme' & new_meta.template_name == 'default') {",
							"            new_meta.value = [];",
							"            new_meta.template_name = 'internal';",
							"            new_meta.metadata_name = 'theme_id';",
							"        }",
							"        else if (!meta_info.definition.allow_empty) {",
							"            error_values.push(new_meta.metadata_name + \" wasn't updated because \" + new_meta.metadata_name + \" of template \" + new_meta.template_name + \" doesn't allow empty values\");",
							"            set_value = false ;",
							"            return;",
							"        }",
							"        else if ((meta_info.definition.type == 'double' || meta_info.definition.type == 'int' || meta_info.definition.type == 'datetime' || meta_info.definition.type == 'date') && !meta_info.override_remote_value) {",
							"            new_meta.value = null;",
							"        }",
							"        else if (meta_info.definition.type == 'multitext') {",
							"            new_meta.value = [];",
							"        }",
							"        else if (meta_info.definition.type == 'boolean') {",
							"            error_values.push(new_meta.metadata_name + \" wasn't updated because booleans only accept true or false values\");",
							"            set_value = false ;",
							"            return;",
							"        }",
							"    }",
							"    else {",
							"        if (meta_info.definition.type == 'text' && meta_info.definition.choices) {",
							"            //check if value part of the choices",
							"            if (new_meta.metadata_name == 'license') {",
							"                var license_found = meta_info.definition.choices.find(element => Object.values(element.labels).indexOf(new_meta.value) > -1);",
							"                if (license_found) {",
							"                    new_meta.metadata_name = 'license_id';",
							"                    new_meta.value = license_found.id;",
							"                    new_meta.template_name = 'internal';",
							"                }",
							"                else {",
							"                    error_values.push(new_meta.metadata_name + \" wasn't updated because \" + new_meta.metadata_name + \" of template \" + new_meta.template_name + \" doesn't have \" + new_meta.value + \" in the possible choices\");",
							"                    set_value = false ;",
							"                    return;",
							"                }",
							"            }",
							"            else if (new_meta.metadata_name == 'language') {",
							"                //problem with language in the API management currently",
							"                var complete_language = meta_info.definition.choices.find(element => { return element.includes(new_meta.value) });",
							"                if (!complete_language) {",
							"                    error_values.push(new_meta.metadata_name + \" wasn't updated because \" + new_meta.metadata_name + \" of template \" + new_meta.template_name + \" doesn't have \" + new_meta.value + \" in the possible choices\");",
							"                    set_value = false ;",
							"                    return;",
							"                }",
							"                new_meta.value = complete_language[0];",
							"            }",
							"            else if (!meta_info.definition.choices.includes(new_meta.value)) {",
							"                error_values.push(new_meta.metadata_name + \" wasn't updated because \" + new_meta.metadata_name + \" of template \" + new_meta.template_name + \" doesn't have \" + new_meta.value + \" in the possible choices\");",
							"                set_value = false ;",
							"                return;",
							"            }",
							"        }",
							"        else if (meta_info.definition.type == 'multitext') {",
							"            //separator ',' in export catalogue, and ';' in domaindatasets",
							"            //new_meta.value = new_meta.value.split(\",\");",
							"            new_meta.value = new_meta.value.split(\";\");",
							"            //multidatalist with required choices",
							"            if (meta_info.definition.choices || (meta_info.definition.widget.suggest_values && !meta_info.definition.widget.suggest_url)) {",
							"                //vérifie que fait partie des choix:",
							"                var accepted_choices = [];",
							"                if (new_meta.metadata_name == 'theme' && new_meta.template_name == 'default') {",
							"                    new_meta.template_name = 'internal';",
							"                    new_meta.metadata_name = 'theme_id';",
							"                    var complete_theme = {};",
							"                    new_meta.value.forEach(function (e) {",
							"                        e = e.trim();",
							"                        complete_theme = themes_id_list_json[\"properties\"][\"metadata.themes\"].find(element => { return Object.values(element.labels).includes(e) });",
							"                        if (complete_theme) {",
							"                            accepted_choices.push(complete_theme.id);",
							"                        }",
							"                        else {",
							"                            error_values.push(e + \" wasn't added to \" + new_meta.metadata_name + \" of template \" + new_meta.template_name + \" because it is not part of the acceptable theme labels\");",
							"                            set_value = false ;",
							"                            return;",
							"                        }",
							"                    })",
							"                }",
							"                else {",
							"                    if (meta_info.definition.choices) {",
							"                            new_meta.value.forEach(function (e) {",
							"                            if (meta_info.definition.choices.includes(e)) {",
							"                                accepted_choices.push(e);",
							"                            }",
							"                            else {",
							"                                error_values.push(e + \" wasn't added to \" + new_meta.metadata_name + \" of template \" + new_meta.template_name + \" because it is not part of the possible choices\");",
							"                                set_value = false ;",
							"                                return;",
							"                            }",
							"                        })",
							"                    }",
							"                    if (meta_info.definition.widget.suggest_values) {",
							"                            new_meta.value.forEach(function (e) {",
							"                            if (meta_info.definition.widget.suggest_values.includes(e)) {",
							"                                accepted_choices.push(e);",
							"                            }",
							"                            else {",
							"                                error_values.push(e + \" wasn't added to \" + new_meta.metadata_name + \" of template \" + new_meta.template_name + \" because it is not part of the possible choices\");",
							"                                set_value = false ;",
							"                                return;",
							"                            }",
							"                        })",
							"                    }",
							"                }",
							"                new_meta.value = accepted_choices;",
							"            }",
							"        }",
							"        else if (meta_info.definition.type == 'datetime' || meta_info.definition.type == 'date') {",
							"            //check if input looks like date or datetime",
							"            if ((new Date(new_meta.value) !== \"Invalid Date\") && !isNaN(new Date(new_meta.value))) {",
							"                //\"Invalid datetime format for: {value}. Supported format is 2017-07-24T11:56:28+00:00\"",
							"                new_date = new Date(new_meta.value);",
							"                //Until explanation for datetime format, execute below",
							"                if (meta_info.definition.type == 'date') {",
							"                    new_meta.value = new_date.toISOString().substring(0, 10);",
							"                }",
							"                else {",
							"                    new_meta.value = new_date.toISOString().split(\".\")[0] + \"+00:00\";",
							"                }",
							"            }",
							"            else {",
							"                error_values.push(new_meta.metadata_name + \" of template \" + new_meta.template_name + \" wasn't updated because \" + new_meta.value + \" is not a valid \" + meta_info.definition.type);",
							"                set_value = false ;",
							"                return;",
							"            }",
							"        }",
							"        else if (meta_info.definition.type == 'int') {",
							"            //check if valid integer",
							"            if (!Number.isInteger(+new_meta.value)) {",
							"                error_values.push(new_meta.metadata_name + \" of template \" + new_meta.template_name + \" wasn't updated because \" + new_meta.value + \" is not a valid integer\");",
							"                set_value = false ;",
							"                return;",
							"            }",
							"        }",
							"        else if (meta_info.definition.type == 'double') {",
							"            //check if valid double",
							"            if (isNaN(new_meta.value) || Math.sign(new_meta.value) == -1) {",
							"                error_values.push(new_meta.metadata_name + \" of template \" + new_meta.template_name + \" wasn't updated because \" + new_meta.value + \" is not a valid double\");",
							"                set_value = false ;",
							"                return;",
							"            }",
							"        }",
							"        else if (meta_info.definition.type == 'boolean') {",
							"            if (![null, \"false\", \"true\"].includes(new_meta.value)) {",
							"                error_values.push(new_meta.metadata_name + \" of template \" + new_meta.template_name + \" wasn't updated because \" + new_meta.value + \" is not a valid boolean\");",
							"                set_value = false ;",
							"                return;",
							"            }",
							"            new_meta.value = (new_meta.value == 'true');",
							"        }",
							"    }",
							"    if (set_value) { metadata_put_body.push(new_meta); }",
							"});",
							"pm.variables.set(\"number_of_metas_updated\", metadata_put_body.length);",
							"pm.variables.set(\"put_body\", JSON.stringify(metadata_put_body));",
							"if (error_values.length > 0) {",
							"    console.log(error_values);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Number of metadatas updated is equivalent to number of metadata in the data file\", function () {",
							"    //console.log(\"number of metadatas to update: \" + (Object.keys(pm.iterationData.variables()).length - 1));",
							"    //console.log(\"number of metadatas updated: \" + pm.environment.get(\"number_of_metas_updated\"));",
							"    //length - 1 because of datasetid",
							"    pm.expect(Object.keys(pm.iterationData.toObject()).length - 1).to.eql(pm.variables.get(\"number_of_metas_updated\"));",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"if (pm.variables.get(\"publish_metadata\")=='false' || pm.variables.get(\"published\")=='false') {",
							"    postman.setNextRequest(null);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"metas\": {{put_body}} \n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{domainid}}.opendatasoft.com/api/management/v2/datasets/{{datasetuid}}/metadata/?apikey={{apikey}}",
					"protocol": "https",
					"host": [
						"{{domainid}}",
						"opendatasoft",
						"com"
					],
					"path": [
						"api",
						"management",
						"v2",
						"datasets",
						"{{datasetuid}}",
						"metadata",
						""
					],
					"query": [
						{
							"key": "apikey",
							"value": "{{apikey}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4. Publish metadata",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"The request does not return an error saying that the dataset is not published\", function () {",
							"    pm.expect(pm.response.json()).to.not.have.property(\"error_key\");",
							"    pm.expect(pm.response.json().error_key).to.not.eql(\"PublishingMetadataOnlyUnpublishedDatasetException\");",
							"});",
							"pm.test(\"New metadata have been published\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey"
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://{{domainid}}.opendatasoft.com/api/management/v2/datasets/{{datasetuid}}/publish_metadata/?apikey={{apikey}}",
					"protocol": "https",
					"host": [
						"{{domainid}}",
						"opendatasoft",
						"com"
					],
					"path": [
						"api",
						"management",
						"v2",
						"datasets",
						"{{datasetuid}}",
						"publish_metadata",
						""
					],
					"query": [
						{
							"key": "apikey",
							"value": "{{apikey}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "publish_metadata",
			"value": "true"
		}
	]
}